package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/kom1ssar/grpc-auth/internal/service.UserService -o user_service_minimock.go -n UserServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/kom1ssar/grpc-auth/internal/model"
)

// UserServiceMock implements service.UserService
type UserServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, user *model.User, passwordConfirm string) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, user *model.User, passwordConfirm string)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mUserServiceMockCreate

	funcGetById          func(ctx context.Context, id int64) (up1 *model.User, err error)
	inspectFuncGetById   func(ctx context.Context, id int64)
	afterGetByIdCounter  uint64
	beforeGetByIdCounter uint64
	GetByIdMock          mUserServiceMockGetById
}

// NewUserServiceMock returns a mock for service.UserService
func NewUserServiceMock(t minimock.Tester) *UserServiceMock {
	m := &UserServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mUserServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*UserServiceMockCreateParams{}

	m.GetByIdMock = mUserServiceMockGetById{mock: m}
	m.GetByIdMock.callArgs = []*UserServiceMockGetByIdParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserServiceMockCreate struct {
	mock               *UserServiceMock
	defaultExpectation *UserServiceMockCreateExpectation
	expectations       []*UserServiceMockCreateExpectation

	callArgs []*UserServiceMockCreateParams
	mutex    sync.RWMutex
}

// UserServiceMockCreateExpectation specifies expectation struct of the UserService.Create
type UserServiceMockCreateExpectation struct {
	mock    *UserServiceMock
	params  *UserServiceMockCreateParams
	results *UserServiceMockCreateResults
	Counter uint64
}

// UserServiceMockCreateParams contains parameters of the UserService.Create
type UserServiceMockCreateParams struct {
	ctx             context.Context
	user            *model.User
	passwordConfirm string
}

// UserServiceMockCreateResults contains results of the UserService.Create
type UserServiceMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for UserService.Create
func (mmCreate *mUserServiceMockCreate) Expect(ctx context.Context, user *model.User, passwordConfirm string) *mUserServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserServiceMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &UserServiceMockCreateParams{ctx, user, passwordConfirm}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the UserService.Create
func (mmCreate *mUserServiceMockCreate) Inspect(f func(ctx context.Context, user *model.User, passwordConfirm string)) *mUserServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for UserServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by UserService.Create
func (mmCreate *mUserServiceMockCreate) Return(i1 int64, err error) *UserServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &UserServiceMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the UserService.Create method
func (mmCreate *mUserServiceMockCreate) Set(f func(ctx context.Context, user *model.User, passwordConfirm string) (i1 int64, err error)) *UserServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the UserService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the UserService.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the UserService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mUserServiceMockCreate) When(ctx context.Context, user *model.User, passwordConfirm string) *UserServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserServiceMock.Create mock is already set by Set")
	}

	expectation := &UserServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &UserServiceMockCreateParams{ctx, user, passwordConfirm},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up UserService.Create return parameters for the expectation previously defined by the When method
func (e *UserServiceMockCreateExpectation) Then(i1 int64, err error) *UserServiceMock {
	e.results = &UserServiceMockCreateResults{i1, err}
	return e.mock
}

// Create implements service.UserService
func (mmCreate *UserServiceMock) Create(ctx context.Context, user *model.User, passwordConfirm string) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, user, passwordConfirm)
	}

	mm_params := UserServiceMockCreateParams{ctx, user, passwordConfirm}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := UserServiceMockCreateParams{ctx, user, passwordConfirm}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("UserServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the UserServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, user, passwordConfirm)
	}
	mmCreate.t.Fatalf("Unexpected call to UserServiceMock.Create. %v %v %v", ctx, user, passwordConfirm)
	return
}

// CreateAfterCounter returns a count of finished UserServiceMock.Create invocations
func (mmCreate *UserServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of UserServiceMock.Create invocations
func (mmCreate *UserServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to UserServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mUserServiceMockCreate) Calls() []*UserServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*UserServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *UserServiceMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *UserServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to UserServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to UserServiceMock.Create")
	}
}

type mUserServiceMockGetById struct {
	mock               *UserServiceMock
	defaultExpectation *UserServiceMockGetByIdExpectation
	expectations       []*UserServiceMockGetByIdExpectation

	callArgs []*UserServiceMockGetByIdParams
	mutex    sync.RWMutex
}

// UserServiceMockGetByIdExpectation specifies expectation struct of the UserService.GetById
type UserServiceMockGetByIdExpectation struct {
	mock    *UserServiceMock
	params  *UserServiceMockGetByIdParams
	results *UserServiceMockGetByIdResults
	Counter uint64
}

// UserServiceMockGetByIdParams contains parameters of the UserService.GetById
type UserServiceMockGetByIdParams struct {
	ctx context.Context
	id  int64
}

// UserServiceMockGetByIdResults contains results of the UserService.GetById
type UserServiceMockGetByIdResults struct {
	up1 *model.User
	err error
}

// Expect sets up expected params for UserService.GetById
func (mmGetById *mUserServiceMockGetById) Expect(ctx context.Context, id int64) *mUserServiceMockGetById {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("UserServiceMock.GetById mock is already set by Set")
	}

	if mmGetById.defaultExpectation == nil {
		mmGetById.defaultExpectation = &UserServiceMockGetByIdExpectation{}
	}

	mmGetById.defaultExpectation.params = &UserServiceMockGetByIdParams{ctx, id}
	for _, e := range mmGetById.expectations {
		if minimock.Equal(e.params, mmGetById.defaultExpectation.params) {
			mmGetById.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetById.defaultExpectation.params)
		}
	}

	return mmGetById
}

// Inspect accepts an inspector function that has same arguments as the UserService.GetById
func (mmGetById *mUserServiceMockGetById) Inspect(f func(ctx context.Context, id int64)) *mUserServiceMockGetById {
	if mmGetById.mock.inspectFuncGetById != nil {
		mmGetById.mock.t.Fatalf("Inspect function is already set for UserServiceMock.GetById")
	}

	mmGetById.mock.inspectFuncGetById = f

	return mmGetById
}

// Return sets up results that will be returned by UserService.GetById
func (mmGetById *mUserServiceMockGetById) Return(up1 *model.User, err error) *UserServiceMock {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("UserServiceMock.GetById mock is already set by Set")
	}

	if mmGetById.defaultExpectation == nil {
		mmGetById.defaultExpectation = &UserServiceMockGetByIdExpectation{mock: mmGetById.mock}
	}
	mmGetById.defaultExpectation.results = &UserServiceMockGetByIdResults{up1, err}
	return mmGetById.mock
}

// Set uses given function f to mock the UserService.GetById method
func (mmGetById *mUserServiceMockGetById) Set(f func(ctx context.Context, id int64) (up1 *model.User, err error)) *UserServiceMock {
	if mmGetById.defaultExpectation != nil {
		mmGetById.mock.t.Fatalf("Default expectation is already set for the UserService.GetById method")
	}

	if len(mmGetById.expectations) > 0 {
		mmGetById.mock.t.Fatalf("Some expectations are already set for the UserService.GetById method")
	}

	mmGetById.mock.funcGetById = f
	return mmGetById.mock
}

// When sets expectation for the UserService.GetById which will trigger the result defined by the following
// Then helper
func (mmGetById *mUserServiceMockGetById) When(ctx context.Context, id int64) *UserServiceMockGetByIdExpectation {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("UserServiceMock.GetById mock is already set by Set")
	}

	expectation := &UserServiceMockGetByIdExpectation{
		mock:   mmGetById.mock,
		params: &UserServiceMockGetByIdParams{ctx, id},
	}
	mmGetById.expectations = append(mmGetById.expectations, expectation)
	return expectation
}

// Then sets up UserService.GetById return parameters for the expectation previously defined by the When method
func (e *UserServiceMockGetByIdExpectation) Then(up1 *model.User, err error) *UserServiceMock {
	e.results = &UserServiceMockGetByIdResults{up1, err}
	return e.mock
}

// GetById implements service.UserService
func (mmGetById *UserServiceMock) GetById(ctx context.Context, id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetById.beforeGetByIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetById.afterGetByIdCounter, 1)

	if mmGetById.inspectFuncGetById != nil {
		mmGetById.inspectFuncGetById(ctx, id)
	}

	mm_params := UserServiceMockGetByIdParams{ctx, id}

	// Record call args
	mmGetById.GetByIdMock.mutex.Lock()
	mmGetById.GetByIdMock.callArgs = append(mmGetById.GetByIdMock.callArgs, &mm_params)
	mmGetById.GetByIdMock.mutex.Unlock()

	for _, e := range mmGetById.GetByIdMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetById.GetByIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetById.GetByIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetById.GetByIdMock.defaultExpectation.params
		mm_got := UserServiceMockGetByIdParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetById.t.Errorf("UserServiceMock.GetById got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetById.GetByIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetById.t.Fatal("No results are set for the UserServiceMock.GetById")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetById.funcGetById != nil {
		return mmGetById.funcGetById(ctx, id)
	}
	mmGetById.t.Fatalf("Unexpected call to UserServiceMock.GetById. %v %v", ctx, id)
	return
}

// GetByIdAfterCounter returns a count of finished UserServiceMock.GetById invocations
func (mmGetById *UserServiceMock) GetByIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetById.afterGetByIdCounter)
}

// GetByIdBeforeCounter returns a count of UserServiceMock.GetById invocations
func (mmGetById *UserServiceMock) GetByIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetById.beforeGetByIdCounter)
}

// Calls returns a list of arguments used in each call to UserServiceMock.GetById.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetById *mUserServiceMockGetById) Calls() []*UserServiceMockGetByIdParams {
	mmGetById.mutex.RLock()

	argCopy := make([]*UserServiceMockGetByIdParams, len(mmGetById.callArgs))
	copy(argCopy, mmGetById.callArgs)

	mmGetById.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIdDone returns true if the count of the GetById invocations corresponds
// the number of defined expectations
func (m *UserServiceMock) MinimockGetByIdDone() bool {
	for _, e := range m.GetByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetById != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIdInspect logs each unmet expectation
func (m *UserServiceMock) MinimockGetByIdInspect() {
	for _, e := range m.GetByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserServiceMock.GetById with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		if m.GetByIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserServiceMock.GetById")
		} else {
			m.t.Errorf("Expected call to UserServiceMock.GetById with params: %#v", *m.GetByIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetById != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		m.t.Error("Expected call to UserServiceMock.GetById")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockGetByIdInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetByIdDone()
}
